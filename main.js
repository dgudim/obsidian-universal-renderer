/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GraphvizPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/setting.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  dotPath: "dot",
  pdflatexPath: "pdflatex",
  pdf2svgPath: "pdf2svg",
  blockdiagPath: "blockdiag",
  ditaaPath: "ditaa"
};
var GraphvizSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    let setting;
    for (setting in DEFAULT_SETTINGS) {
      new import_obsidian.Setting(containerEl).setName(setting).addText(
        (text) => text.setPlaceholder(DEFAULT_SETTINGS[setting]).setValue(this.plugin.settings[setting]).onChange(
          async (value) => {
            this.plugin.settings[setting] = value;
            await this.plugin.saveSettings();
          }
        )
      );
    }
  }
};

// src/processors.ts
var os = __toESM(require("os"));
var path = __toESM(require("path"));
var fs2 = __toESM(require("fs"));
var import_child_process = require("child_process");
var crypto = __toESM(require("crypto"));

// src/utils.ts
var fs = __toESM(require("fs"));
function readFileString(path2) {
  return fs.readFileSync(path2).toString();
}
function insertStr(str, start, newSubStr) {
  return str.slice(0, start) + newSubStr + str.slice(start);
}

// src/processors.ts
var md5 = (contents) => crypto.createHash("md5").update(contents).digest("hex");
var renderTypes = ["dot", "latex", "ditaa", "blockdiag", "refgraph", "dynamic-svg"];
var svgTags = ["text", "path", "rect", "circle", "ellipse", "line", "polyline", "polygon"];
var svgStyleTags = ["fill", "stroke"];
var svgStyleRegex = new RegExp(`(?:${svgStyleTags.join("|")})=".*?"`, "g");
var svgColorMap = /* @__PURE__ */ new Map([
  // dark colors
  ["darkred", "--g-color-dark-red"],
  ["firebrick", "--g-color-dark-red"],
  ["maroon", "--g-color-dark-red"],
  ["brown", "--g-color-dark-red"],
  ["darkred", "--g-color-dark-red"],
  ["darkmagenta", "--g-color-dark-purple"],
  ["darkviolet", "--g-color-dark-purple"],
  ["blueviolet", "--g-color-dark-purple"],
  ["darkorchid", "--g-color-dark-purple"],
  ["indigo", "--g-color-dark-purple"],
  ["darkgreen", "--g-color-dark-green"],
  ["darkblue", "--g-color-dark-blue"],
  ["chocolate", "--g-color-dark-orange"],
  ["goldenrod", "--g-color-dark-yellow"],
  ["darkcyan", "--g-color-dark-cyan"],
  // neutral colors
  ["red", "--g-color-red"],
  ["purple", "--g-color-purple"],
  ["green", "--g-color-green"],
  ["blue", "--g-color-blue"],
  ["darkorange", "--g-color-orange"],
  ["yellow", "--g-color-yellow"],
  ["cyan", "--g-color-cyan"],
  // light colors
  ["tomato", "--g-color-light-red"],
  ["lightcoral", "--g-color-light-red"],
  ["indianred", "--g-color-light-red"],
  ["magenta", "--g-color-light-purple"],
  ["lightgreen", "--g-color-light-green"],
  ["lightblue", "--g-color-light-blue"],
  ["orange", "--g-color-light-orange"],
  ["coral", "--g-color-light-orange"],
  ["gold", "--g-color-light-yellow"],
  ["aqua", "--g-color-light-cyan"],
  ["aquamarine", "--g-color-light-cyan"]
]);
var svgShadesMap = /* @__PURE__ */ new Map([
  // gray colors
  ["ghostwhite", "--g-color-light100-hard"],
  // #F9F5D7
  ["white", "--g-color-light100"],
  // #FBF1C7
  ["seashell", "--g-color-light100-soft"],
  // #F2E5BC
  ["snow", "--g-color-light90"],
  // #EBDBB2                    
  ["whitesmoke", "--g-color-light80"],
  // #D5C4A1
  ["lightgray", "--g-color-light70"],
  // #BDAE93
  ["lightgrey", "--g-color-light70"],
  ["silver", "--g-color-light60"],
  // #A89984
  //['--g-color-dark100-hard']               // #1D2021 unused
  ["black", "--g-color-dark100"],
  // #282828
  ["dimgray", "--g-color-dark100-soft"],
  // #32302F
  ["darkslategray", "--g-color-dark90"],
  // #3C3836
  ["slategray", "--g-color-dark80"],
  // #504945
  ["lightslategray", "--g-color-dark70"],
  // #665C54
  ["gray", "--g-color-dark60"],
  // #7C6F64
  ["grey", "--g-color-dark60"],
  ["darkgray", "--g-color-gray"],
  // #928374
  ["darkgrey", "--g-color-gray"]
]);
var presets = /* @__PURE__ */ new Map([
  ["math-graph", /* @__PURE__ */ new Map([
    ["ellipse-fill", "keep-shade"],
    ["text-fill", "keep-shade"]
  ])]
]);
function mapColor(color) {
  const remappedColor = svgColorMap.get(color);
  const remappedShade = svgShadesMap.get(color);
  if (remappedColor) {
    return {
      color: remappedColor,
      type: "color"
    };
  } else if (remappedShade) {
    return {
      color: remappedShade,
      type: "color"
    };
  }
  return {
    color: void 0,
    type: "unknown"
  };
}
function invertColor(color) {
  if (color === void 0) {
    return void 0;
  }
  if (color.contains("light")) {
    return color.replace("light", "dark");
  } else {
    return color.replace("dark", "light");
  }
}
function getTempDir(type) {
  return path.join(os.tmpdir(), `obsidian-${type}`);
}
var Processors = class {
  constructor(plugin) {
    this.referenceGraphMap = /* @__PURE__ */ new Map();
    this.pluginSettings = plugin.settings;
    this.vaultAdapter = plugin.app.vault.adapter;
    this.metadataCache = plugin.app.metadataCache;
  }
  getRendererParameters(type, sourceFile, outputFile) {
    switch (type) {
      case "dot":
        return [this.pluginSettings.dotPath, ["-Tsvg", sourceFile, "-o", outputFile]];
      case "latex":
        return [this.pluginSettings.pdflatexPath, ["-shell-escape", "-output-directory", getTempDir(type), sourceFile]];
      case "ditaa":
        return [this.pluginSettings.ditaaPath, [sourceFile, "--transparent", "--svg", "--overwrite"]];
      case "blockdiag":
        return [this.pluginSettings.blockdiagPath, ["--antialias", "-Tsvg", sourceFile, "-o", outputFile]];
      default:
        return ["", []];
    }
  }
  getProcessorForType(type) {
    return (source, el, ctx) => {
      return this.imageProcessor(source, el, ctx, type);
    };
  }
  spawnProcess(cmdPath, parameters) {
    return new Promise((resolve, reject) => {
      console.debug(`Starting external process ${cmdPath}, ${parameters}`);
      const process = (0, import_child_process.spawn)(cmdPath, parameters);
      let errData = "";
      process.stderr.on("data", (data) => {
        errData += data;
      });
      process.on("error", (err) => reject(`"${cmdPath} ${parameters}" failed, ${err}`));
      process.stdin.end();
      process.on("exit", (code) => {
        if (code !== 0) {
          return reject(`"${cmdPath} ${parameters}" failed, error code: ${code}, stderr: ${errData}`);
        }
        resolve("ok");
      });
    });
  }
  async writeRenderedFile(inputFile, outputFile, type, conversionParams) {
    const [cmdPath, params] = this.getRendererParameters(type, inputFile, outputFile);
    await this.spawnProcess(cmdPath, params);
    if (type === "latex") {
      await this.spawnProcess(this.pluginSettings.pdf2svgPath, [`${inputFile}.pdf`, outputFile]);
    }
    const svg = this.makeDynamicSvg(fs2.readFileSync(outputFile).toString(), conversionParams);
    fs2.writeFileSync(outputFile, svg.svgData);
    return svg;
  }
  makeDynamicSvg(svgSource, conversionParams) {
    const svgStart = svgSource.indexOf("<svg") + 4;
    let currentIndex;
    for (const svgTag of svgTags) {
      currentIndex = svgStart;
      while (true) {
        currentIndex = svgSource.indexOf(`<${svgTag}`, currentIndex);
        if (currentIndex == -1) {
          break;
        }
        currentIndex += svgTag.length + 2;
        const styleSubstring = svgSource.substring(currentIndex, svgSource.indexOf(">", currentIndex));
        let newStyle = 'style="';
        let additionalTag = "";
        for (const svgStyleTag of svgStyleTags) {
          const tagStyle = styleSubstring.match(`${svgStyleTag}=".*?"`);
          if (svgTag === "text" && !(tagStyle == null ? void 0 : tagStyle.length) && svgStyleTag == "stroke") {
            continue;
          }
          const tagColor = (tagStyle == null ? void 0 : tagStyle.length) ? tagStyle[0].replaceAll(/.*=|"/g, "") : "black";
          const rcolor = mapColor(tagColor);
          if (rcolor.color) {
            switch (conversionParams.get(`${svgTag}-${svgStyleTag}`)) {
              case "keep-color":
                additionalTag = 'class="keep-color"';
                break;
              case "keep-shade":
                additionalTag = 'class="keep-shade"';
                break;
              case "keep-all":
                additionalTag = 'class="keep-color keep-shade"';
                break;
              case "invert-color":
                if (rcolor.type === "color") {
                  rcolor.color = invertColor(rcolor.color);
                }
                break;
              case "invert-shade":
                if (rcolor.type === "shade") {
                  rcolor.color = invertColor(rcolor.color);
                }
                break;
              case "invert-all":
                rcolor.color = invertColor(rcolor.color);
            }
            newStyle += `${svgStyleTag}:var(${rcolor.color});`;
          } else {
            newStyle += `${svgStyleTag}:${tagColor};`;
          }
        }
        newStyle += `" ${additionalTag} `;
        svgSource = insertStr(svgSource, currentIndex, newStyle);
      }
    }
    svgSource = svgSource.replaceAll(svgStyleRegex, "");
    return {
      svgData: svgSource,
      extras: conversionParams
    };
  }
  parseFrontMatter(source, outputFile) {
    const conversionParams = /* @__PURE__ */ new Map();
    let referenceName = "";
    let preset;
    if (source.startsWith("---")) {
      const lastIndex = source.indexOf("---", 3);
      const frontMatter = source.substring(3, lastIndex);
      const parameters = frontMatter.trim().split("\n");
      for (const parameter of parameters) {
        const parameter_split = parameter.split(":");
        const parameter_name = parameter_split[0].trim();
        const parameter_value = parameter_split[1].trim();
        switch (parameter_name) {
          case "ref-name":
          case "graph-name":
          case "name":
            referenceName = parameter_value;
            break;
          case "preset":
            preset = presets.get(parameter_value);
            if (!preset) {
              break;
            }
            for (const [preset_key, preset_value] of preset) {
              conversionParams.set(preset_key, preset_value);
            }
            break;
          default:
            conversionParams.set(parameter_name, parameter_value);
        }
      }
      source = source.substring(lastIndex + 3);
      if (referenceName.length > 0) {
        this.referenceGraphMap.set(referenceName, {
          sourcePath: outputFile,
          extras: conversionParams
        });
      }
    }
    return {
      cleanedSource: source.trim(),
      extras: conversionParams
    };
  }
  async renderImage(type, source) {
    var _a;
    if (type === "refgraph") {
      const graphData2 = this.referenceGraphMap.get(source.trim());
      if (!graphData2) {
        throw Error(`Graph with name ${source} does not exist`);
      }
      return {
        svgData: readFileString(graphData2.sourcePath),
        extras: graphData2.extras
      };
    }
    const temp_dir = getTempDir(type);
    const graph_hash = md5(source);
    const inputFile = path.join(temp_dir, graph_hash);
    const outputFile = `${inputFile}.svg`;
    if (!fs2.existsSync(temp_dir)) {
      fs2.mkdirSync(temp_dir);
    }
    const graphData = this.parseFrontMatter(source, outputFile);
    if (type === "dynamic-svg") {
      const resolvedLink = (_a = this.metadataCache.getFirstLinkpathDest(graphData.cleanedSource.slice(2, -2), "")) == null ? void 0 : _a.path;
      if (!resolvedLink) {
        throw Error(`Invalid link: ${graphData.cleanedSource}`);
      }
      return this.makeDynamicSvg((await this.vaultAdapter.read(resolvedLink)).toString(), graphData.extras);
    }
    if (!fs2.existsSync(inputFile)) {
      fs2.writeFileSync(inputFile, graphData.cleanedSource);
    } else if (fs2.existsSync(outputFile)) {
      return {
        svgData: readFileString(outputFile),
        extras: graphData.extras
      };
    }
    return this.writeRenderedFile(inputFile, outputFile, type, graphData.extras);
  }
  async imageProcessor(source, el, _, type) {
    try {
      console.debug(`Call image processor for ${type}`);
      const image = await this.renderImage(type, source.trim());
      el.classList.add(image.extras.get("inverted") ? "multi-graph-inverted" : "multi-graph-normal");
      el.innerHTML = image.svgData;
    } catch (errMessage) {
      console.error("convert to image error: " + errMessage);
      const pre = document.createElement("pre");
      const code = document.createElement("code");
      code.setText(errMessage);
      pre.appendChild(code);
      el.appendChild(pre);
    }
  }
};

// src/main.ts
var GraphvizPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    console.debug("Load universal renderer plugin");
    await this.loadSettings();
    this.addSettingTab(new GraphvizSettingsTab(this));
    const processors = new Processors(this);
    this.app.workspace.onLayoutReady(() => {
      for (const type of renderTypes) {
        this.registerMarkdownCodeBlockProcessor(type, processors.getProcessorForType(type).bind(processors));
      }
    });
  }
  onunload() {
    console.debug("Unload universal renderer plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    return Promise.resolve();
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
